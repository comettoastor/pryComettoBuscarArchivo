<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAASUVORK5CYII=
</value>
  </data>
</root>